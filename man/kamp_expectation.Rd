% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kamp_expectation.R
\name{kamp_expectation}
\alias{kamp_expectation}
\title{KAMP univariate expectation}
\usage{
kamp_expectation(
  ppp_obj,
  rvals = c(0, 0.05, 0.075, 0.1, 0.15, 0.2),
  correction = "trans",
  marksvar1 = "immune"
)
}
\arguments{
\item{ppp_obj}{A point pattern object from the \code{spatstat.geom} package.}

\item{rvals}{Vector of radii at which to calculate the KAMP expectation. Defaults to c(0, 0.05, 0.075, 0.1, 0.15, 0.2).}

\item{correction}{Type of edge correction method to be used and passed to \code{Kcross} and \code{Kest}. Defaults to translational edge correction.}

\item{marksvar1}{Identifies subset of marked points. Defaults to immune.}
}
\value{
A dataframe with the following columns:
\describe{
\item{r}{The radius at which K was calculated.}
\item{k}{The observed K value from \code{Kcross}}
\item{theo_csr}{The theoretical K under CSR from \code{Kcross}}
\item{kamp_csr}{The adjusted CSR representing the permuted expectation.}
\item{kamp}{The difference between observed K and KAMP CSR}
}
}
\description{
Computes the KAMP (K-function Adjusted for Marked Permutations) expectation
for a given spatial point pattern. This function calculates Ripley's K
using both the traditional Ripley's K method (based on \code{Kcross})
and the KAMP-adjusted CSR baseline (based on \code{Kest}).

The KAMP-adjusted CSR represents a more robust baseline for K (compared
to traditional CSR) that accounts for spatial clustering or inhomogeneity
in a point pattern compared to the traditional CSR assumption, while
avoiding the computational burden of permuting the point pattern.

Notes:

This function uses the \code{spatstat} package under the hood, which
automatically uses border correction when the number of
points in the point pattern is more than 3000.

See \code{?Kcross} and \code{?Kest} for more details on the K calculation methods.

See \code{kamp_expectation_mat} for the matrix-based implementation.
}
\details{
Compute KAMP Expectation
}
\examples{
if (requireNamespace("spatstat.geom", quietly = TRUE)) {
  # simulates a simple spatial point pattern with two types
  win <- spatstat.geom::owin(c(0, 1), c(0, 1))
  pp <- spatstat.random::rpoispp(lambda = 100, win = win)
  marks <- sample(c("immune", "background"), pp$n, replace = TRUE)
  marked_pp <- spatstat.geom::ppp(pp$x, pp$y, window = win, marks = factor(marks))

  # computes KAMP expectation
  kamp_result <- kamp_expectation(marked_pp, marksvar1 = "immune")
  print(kamp_result)
}
}
