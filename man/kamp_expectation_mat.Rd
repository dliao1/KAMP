% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kamp_expectation.R
\name{kamp_expectation_mat}
\alias{kamp_expectation_mat}
\title{KAMP univariate Expectation (Matrix Implementation)}
\usage{
kamp_expectation_mat(
  ppp_obj,
  rvec = c(0, 0.05, 0.075, 0.1, 0.15, 0.2),
  correction = "trans",
  markvar = "immune",
  thin_pct = 0
)
}
\arguments{
\item{ppp_obj}{A point pattern object of class "ppp" from the spatstat package.}

\item{rvec}{A vector of radii at which to calculate the KAMP expectation.}

\item{correction}{Type of edge correction. Defaults to translational.}

\item{markvar}{The variable used to mark the points in the point pattern object. Defaults to "immune".}

\item{thin_pct}{Percentage that determines how much to thin the amount of points in the point pattern object. Defaults to 0.}
}
\value{
A dataframe with the following columns:
\describe{
\item{r}{The radius at which K was calculated.}
\item{k}{The observed K value calculated using matrices}
\item{theo_csr}{The theoretical K under CSR}
\item{kamp_csr}{The adjusted CSR representing the permuted expectation.}
\item{kamp_fundiff}{The difference between observed K and KAMP CSR}
}
}
\description{
Computes the KAMP (K-function Adjusted for Marked Permutations) expectation
for a given spatial point pattern. This function calculates Ripley's K
using both the traditional Ripley's K method (based on \code{Kcross})
and the KAMP-adjusted CSR baseline (based on \code{Kest}).

The KAMP-adjusted CSR represents a more realistic baseline for K (compared
to traditional CSR) that accounts for spatial clustering or inhomogeneity
in a point pattern compared to the traditional CSR assumption, while
avoiding the computational burden of permuting the point pattern.

Note: this is a slower, matrix-based implementation of the KAMP expectation

See \code{get_kamp_expectation} for the faster implementation that utilizes
functions in \code{spatstat}
}
\details{
Computes KAMP Expectation using matrices
}
\examples{
if (requireNamespace("spatstat.geom", quietly = TRUE)) {
# simulate a simple spatial point pattern with two types
win <- spatstat.geom::owin(c(0, 1), c(0, 1))
pp <- spatstat.random::rpoispp(lambda = 100, win = win)
marks <- sample(c("immune", "background"), pp$n, replace = TRUE)
marked_pp <- spatstat.geom::ppp(pp$x, pp$y, window = win, marks = factor(marks))
# compute KAMP expectation using matrix method
kamp_result_mat <- kamp_expectation_mat(marked_pp, markvar = "immune")
print(kamp_result_mat)
}
}
