[{"path":"https://dliao1.github.io/kperm/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Daisy Liao Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dliao1.github.io/kperm/articles/my-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to kamp","text":"Hello welcome kamp package! package designed calculate expectation variance KAMP (K adjustment Analytical Moments Permutation distribution) point patterns marks. package partially built spatstat package, powerful tool analyzing spatial data R. kamp package provides functions simulate point patterns, calculate KAMP CSR, visualize results. package designed user-friendly easy use, focus providing clear concise output. package still development, welcome feedback suggestions improvement. questions issues, please feel free reach us.","code":""},{"path":"https://dliao1.github.io/kperm/articles/my-vignette.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Introduction to kamp","text":"","code":"library(kamp) #library(devtools) library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.2     ✔ tibble    3.3.0 #> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1 #> ✔ purrr     1.1.0      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(spatstat.random) #> Loading required package: spatstat.data #> Loading required package: spatstat.univar #> spatstat.univar 3.1-4 #> Loading required package: spatstat.geom #> spatstat.geom 3.5-0 #> spatstat.random 3.4-1 #devtools::load_all() set.seed(50)"},{"path":"https://dliao1.github.io/kperm/articles/my-vignette.html","id":"simulating-data","dir":"Articles","previous_headings":"","what":"Simulating Data","title":"Introduction to kamp","text":"sim_pp_data function can used simulate univariate point patterns, sim_pp_data_biv function can used simulate bivariate point patterns. sim_pp_data function takes following arguments: lambda_n: number points simulate. abundance: abundance point pattern. markvar1: name first cell type. Defaults “immune”. markvar2: name second cell type. Defaults “background”. distribution: distribution point pattern. can either “hom” homogeneous “inhom” inhomogeneous. clust: logical value indicating whether cluster points . sim_pp_data_biv function takes arguments sim_pp_data, also includes additional argument third cell type. markvar3: name third cell type. Defaults “background”. sim_pp_data sim_pp_data_biv functions return ppp object, class spatstat package represents point pattern. ppp object contains x y coordinates points, well marks associated point.","code":""},{"path":"https://dliao1.github.io/kperm/articles/my-vignette.html","id":"univariate","dir":"Articles","previous_headings":"Simulating Data","what":"Univariate","title":"Introduction to kamp","text":"can plot using ggplot:","code":"univ_data <- sim_pp_data(lambda_n = 200,                      abundance = 0.3,                     markvar1 = \"immune\",                     markvar2 = \"background\",                     distribution = \"hom\",                     clust = FALSE) as_tibble(univ_data) %>%     ggplot(aes(x,y, color = marks)) +     geom_point()"},{"path":"https://dliao1.github.io/kperm/articles/my-vignette.html","id":"bivariate","dir":"Articles","previous_headings":"Simulating Data","what":"Bivariate","title":"Introduction to kamp","text":"can plot using ggplot:","code":"biv_data <- sim_pp_data_biv(lambda_n = 200,                      abundance = 0.3,                     markvar1 = \"immune1\",                     markvar2 = \"immune2\",                     markvar3 = \"background\",                     distribution = \"inhom\",                     clust = TRUE) #> Computing probability for Cell 1 #> Computing probability for Cell 2 #> Computing hole probability as_tibble(biv_data) %>%     ggplot(aes(x,y, color = marks)) +     geom_point()"},{"path":"https://dliao1.github.io/kperm/articles/my-vignette.html","id":"expectation","dir":"Articles","previous_headings":"","what":"Expectation","title":"Introduction to kamp","text":"kamp_expectation function calculates expectation KAMP given point pattern. function takes following arguments: ppp: point pattern object. rvec: vector distances calculate KAMP expectation. Defaults c(0, 0.05, 0.075, 0.1, 0.15, 0.2) correction: Edge correction method. can either “iso” “trans” isotropic translation correction, respectively. default “trans”. markvar: Identifies subset marked points. Defaults immune. thin_pct: percentage points thin point pattern. used reduce number points pattern speed calculation. default 0. kamp_expectation function returns data frame following columns: r: distance KAMP expectation calculated. K: KAMP expectation value. theo_csr: theoretical CSR value. kamp_csr: KAMP CSR value. kamp_fundiff: difference K KAMP CSR. Running code calculates KAMP expectation univariate point pattern. matrix-based equivalent: can plot kamp_fundiff values univariate point pattern using ggplot:  Likewise, code calculates KAMP expectation bivariate point pattern. matrix-based equivalent: can plot kamp_fundiff values bivariate point pattern using ggplot:","code":"univ_kamp_expectation <- kamp_expectation(ppp_obj = univ_data,                                           rvec = c(0, 0.05, 0.1, 0.15, 0.2),                                           correction = \"trans\",                                           markvar = \"immune\",                                           thin_pct = 0)  univ_kamp_expectation #> # A tibble: 5 × 5 #>       r       k theo_csr kamp_csr kamp_fundiff #>   <dbl>   <dbl>    <dbl>    <dbl>        <dbl> #> 1  0    0        0        0           0        #> 2  0.05 0.00828  0.00785  0.00751     0.000771 #> 3  0.1  0.0309   0.0314   0.0300      0.000870 #> 4  0.15 0.0673   0.0707   0.0682     -0.000844 #> 5  0.2  0.130    0.126    0.124       0.00600 univ_kamp_expectation_mat <- kamp_expectation_mat(ppp_obj = univ_data,                                                   rvec = c(0, 0.05, 0.1, 0.15, 0.2),                                                   correction = \"trans\",                                                   markvar = \"immune\",                                                   thin_pct = 0)  univ_kamp_expectation_mat #> # A tibble: 5 × 5 #>       r       k theo_csr kamp_csr kamp_fundiff #>   <dbl>   <dbl>    <dbl>    <dbl>        <dbl> #> 1  0    0        0        0           0        #> 2  0.05 0.00828  0.00785  0.00751     0.000771 #> 3  0.1  0.0309   0.0314   0.0300      0.000870 #> 4  0.15 0.0673   0.0707   0.0682     -0.000844 #> 5  0.2  0.130    0.126    0.124       0.00600 as_tibble(univ_kamp_expectation) %>%     ggplot(aes(r, kamp_fundiff)) +     geom_point() +     geom_line() +     labs(x = \"Distance (r)\", y = \"fundiff = K - KAMP CSR\") +     theme_minimal() biv_kamp_expectation <- kamp_expectation_biv(ppp_obj = biv_data,                                              rvec = c(0, 0.05, 0.1, 0.15, 0.2),                                              correction = \"trans\",                                              markvar1 = \"immune1\",                                              markvar2 = \"immune2\",                                              thin_pct = 0                                              ) biv_kamp_expectation #> # A tibble: 5 × 5 #>       r     k theo_csr kamp_csr kamp_fundiff #>   <dbl> <dbl>    <dbl>    <dbl>        <dbl> #> 1  0    0      0        0            0       #> 2  0.05 0      0.00785  0.00622     -0.00622 #> 3  0.1  0.125  0.0314   0.0250       0.0996  #> 4  0.15 0.501  0.0707   0.101        0.400   #> 5  0.2  0.880  0.126    0.177        0.703 biv_kamp_expectation_mat <- kamp_expectation_biv_mat(ppp_obj = biv_data,                                                      rvec = c(0, 0.05, 0.1, 0.15, 0.2),                                                      correction = \"trans\",                                                      markvar1 = \"immune1\",                                                      markvar2 = \"immune2\",                                                      thin_pct = 0                                                      ) biv_kamp_expectation_mat #> # A tibble: 5 × 5 #>       r     k theo_csr kamp_csr kamp_fundiff #>   <dbl> <dbl>    <dbl>    <dbl>        <dbl> #> 1  0    0      0        0            0       #> 2  0.05 0      0.00785  0.00622     -0.00622 #> 3  0.1  0.125  0.0314   0.0250       0.0996  #> 4  0.15 0.501  0.0707   0.101        0.400   #> 5  0.2  0.880  0.126    0.177        0.703 as_tibble(biv_kamp_expectation) %>%     ggplot(aes(r, kamp_fundiff)) +     geom_point() +     geom_line() +     labs(x = \"Distance (r)\", y = \"fundiff = K - KAMP CSR\") +     theme_minimal()"},{"path":"https://dliao1.github.io/kperm/articles/my-vignette.html","id":"variance","dir":"Articles","previous_headings":"","what":"Variance","title":"Introduction to kamp","text":"kamp_variance function calculates variance KAMP given point pattern. function takes following arguments: ppp: point pattern object. rvec: vector distances calculate KAMP variance. Defaults c(0, 0.05, 0.075, 0.1, 0.15, 0.2) correction: Edge correction method. can either “iso” “trans” isotropic translation correction, respectively. default “trans”. markvar: Identifies subset marked points. Defaults immune. thin_pct: percentage points thin point pattern. used reduce number points pattern speed calculation. default 0. kamp_variance function returns data frame following columns: r: distance KAMP variance calculated. K: KAMP variance value. theo_csr: theoretical CSR value. kamp_csr: KAMP CSR value. kamp_fundiff: difference K KAMP CSR. var: variance KAMP expectation. z: z-score KAMP expectation. pval: p-value KAMP expectation. Note: spatstat equivalent variance function. Running code calculates KAMP variance univariate point pattern. bivariate point pattern:","code":"univ_kamp_variance <- kamp_variance(ppp_obj = univ_data,                                           rvec = c(0, 0.05, 0.1, 0.15, 0.2),                                           correction = \"trans\",                                           markvar = \"immune\",                                           thin_pct = 0)  univ_kamp_variance #> # A tibble: 5 × 7 #>       r       k theo_csr kamp_csr        var       z  pvalue #>   <dbl>   <dbl>    <dbl>    <dbl>      <dbl>   <dbl>   <dbl> #> 1  0    0        0        0       0          NaN     NaN     #> 2  0.05 0.00828  0.00785  0.00751 0.00000310   0.438   0.331 #> 3  0.1  0.0309   0.0314   0.0300  0.0000144    0.229   0.409 #> 4  0.15 0.0673   0.0707   0.0682  0.0000397   -0.134   0.553 #> 5  0.2  0.130    0.126    0.124   0.0000910    0.628   0.265 biv_kamp_variance <- kamp_variance_biv(ppp_obj = biv_data,                                        rvec = c(0, 0.05, 0.1, 0.15, 0.2),                                        correction = \"trans\",                                        markvar1 = \"immune1\",                                        markvar2 = \"immune2\",                                        thin_pct = 0                                        )  biv_kamp_variance #> # A tibble: 5 × 7 #>       r     k theo_csr kamp_csr      var       z        pvalue #>   <dbl> <dbl>    <dbl>    <dbl>    <dbl>   <dbl>         <dbl> #> 1  0    0      0        0       0        NaN     NaN           #> 2  0.05 0      0.00785  0.00622 0.000731  -0.230   0.591       #> 3  0.1  0.125  0.0314   0.0250  0.00293    1.84    0.0330      #> 4  0.15 0.501  0.0707   0.101   0.0120     3.65    0.000132    #> 5  0.2  0.880  0.126    0.177   0.0217     4.77    0.000000916"},{"path":"https://dliao1.github.io/kperm/articles/my-vignette.html","id":"ovarian-dataset","dir":"Articles","previous_headings":"","what":"Ovarian Dataset","title":"Introduction to kamp","text":"ovarian_df dataset point pattern dataset contains x y coordinates ovarian cancer cells, well sample ID mark variable. mark variable indicates whether cell immune cell background cell. ovarian_df dataset small dataframe contains snapshot 5 images ovarian cancer cells HumanOvarianCancerVP() dataset VectraPolarisData package. . image represented unique sample ID, x y coordinates cells provided x y columns, respectively. marks column contains mark variable, indicates whether cell immune cell background cell.","code":"data(ovarian_df) head(ovarian_df) #>   cell_id                                           sample_id       x       y #> 1       1 030120 P9HuP6 TMA 1-B_Core[1,1,H]_[20633,35348].im3 20592.9 34524.4 #> 2       2 030120 P9HuP6 TMA 1-B_Core[1,1,H]_[20633,35348].im3 20859.3 34524.4 #> 3       3 030120 P9HuP6 TMA 1-B_Core[1,1,H]_[20633,35348].im3 20591.4 34530.4 #> 4       4 030120 P9HuP6 TMA 1-B_Core[1,1,H]_[20633,35348].im3 20744.7 34528.9 #> 5       5 030120 P9HuP6 TMA 1-B_Core[1,1,H]_[20633,35348].im3 20419.8 34540.8 #> 6       6 030120 P9HuP6 TMA 1-B_Core[1,1,H]_[20633,35348].im3 20741.7 34542.3 #>       immune tissue_category              slide_id phenotype_cd68 #> 1 background           Tumor 030120 P9HuP6 TMA 1-B                #> 2 background           Tumor 030120 P9HuP6 TMA 1-B                #> 3 background           Tumor 030120 P9HuP6 TMA 1-B          CD68- #> 4 background           Tumor 030120 P9HuP6 TMA 1-B          CD68- #> 5 background           Tumor 030120 P9HuP6 TMA 1-B          CD68- #> 6 background           Tumor 030120 P9HuP6 TMA 1-B          CD68- #>   phenotype_ki67 phenotype_ck phenotype_cd19 phenotype_p_stat3 phenotype_cd3 #> 1                                                                            #> 2                                                                            #> 3          Ki67-          CK+          CD19-           pStat3-          CD3- #> 4          Ki67-          CK+          CD19-           pStat3-          CD3- #> 5          Ki67-          CK-          CD19-           pStat3-          CD3- #> 6          Ki67-          CK+          CD19-           pStat3-          CD3- #>   phenotype_cd8    ck  ki67   cd8  ier3 pstat3   cd3  cd68  cd19   dapi #> 1               0.767 0.310 0.780 0.147  0.103 0.429 0.509 0.000  4.557 #> 2               0.130 0.252 0.919 0.105  0.010 0.811 0.195 0.000 13.844 #> 3          CD8- 1.324 0.128 0.586 0.167  0.127 0.316 0.724 0.000  5.979 #> 4          CD8- 0.815 0.122 0.538 0.142  0.063 0.399 0.519 0.000  4.868 #> 5          CD8- 0.150 0.147 0.498 0.094  0.083 0.285 0.482 0.042  4.127 #> 6          CD8- 1.126 0.245 0.462 0.169  0.050 0.366 0.382 0.000  6.514 #>   phenotype #> 1     other #> 2     other #> 3     tumor #> 4     tumor #> 5     other #> 6     tumor ids = unique(ovarian_df$sample_id)  ovarian_df <- ovarian_df %>% filter(sample_id == ids[[1]])   marksvar = \"immune\" w = convexhull.xy(ovarian_df[[\"x\"]], ovarian_df[[\"y\"]]) pp_obj_ovarian = ppp(ovarian_df[[\"x\"]], ovarian_df[[\"y\"]], window = w, marks = ovarian_df[[marksvar]])  as_tibble(pp_obj_ovarian) %>%     ggplot(aes(x,y, color = marks)) +     geom_point() +     labs(title = \"Ovarian Cancer Cells\") +     theme_minimal()"},{"path":"https://dliao1.github.io/kperm/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daisy Liao. Author, maintainer.","code":""},{"path":"https://dliao1.github.io/kperm/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Liao D (2025). kamp: KAMP: Permutation-Based Ripley's K Analysis Spatial Point Patterns. R package version 0.0.0.9000, https://dliao1.github.io/kperm/.","code":"@Manual{,   title = {kamp: KAMP: Permutation-Based Ripley's K Analysis for Spatial Point Patterns},   author = {Daisy Liao},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://dliao1.github.io/kperm/}, }"},{"path":"https://dliao1.github.io/kperm/index.html","id":"introduction","dir":"","previous_headings":"","what":"KAMP: Permutation-Based Ripley's K Analysis for Spatial Point Patterns","title":"KAMP: Permutation-Based Ripley's K Analysis for Spatial Point Patterns","text":"kperm R package efficiently estimating Ripley’s K complete spatial randomness using robust statistical approach called KAMP (K adjusted Analytical Moments Permutation distribution). KAMP avoids need computationally expensive permutations accounting spatial inhomogeneity, making suitable large-scale spatial analyses encountered spatial proteomics multiplex imaging datasets.","code":""},{"path":"https://dliao1.github.io/kperm/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"KAMP: Permutation-Based Ripley's K Analysis for Spatial Point Patterns","text":"package provides functions compute univariate bivariate KAMP expectation variance (spatstat matrix-based implementation included). time, edge correction methods supported translational (trans) isotropic (iso).","code":""},{"path":[]},{"path":"https://dliao1.github.io/kperm/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"KAMP: Permutation-Based Ripley's K Analysis for Spatial Point Patterns","text":"","code":"# Install from GitHub devtools::install_github(\"dliao1/kperm\")"},{"path":"https://dliao1.github.io/kperm/index.html","id":"univariate","dir":"","previous_headings":"","what":"Univariate","title":"KAMP: Permutation-Based Ripley's K Analysis for Spatial Point Patterns","text":"","code":"library(kperm)  # Simulate a point pattern pp <- sim_pp_data(lambda_n = 500, abundance = 0.3)  # Compute KAMP expectation kamp_expec_univ <- kamp_expectation(pp, markvar = \"immune\") print(kamp_expec_univ)  # Compute KAMP variance kamp_var <- kamp_variance(pp, markvar = \"immune\") print(kamp_var)"},{"path":"https://dliao1.github.io/kperm/index.html","id":"bivariate","dir":"","previous_headings":"","what":"Bivariate","title":"KAMP: Permutation-Based Ripley's K Analysis for Spatial Point Patterns","text":"","code":"library(kperm)  # Simulate a point pattern pp <- sim_pp_data_biv(lambda_n = 500, abundance = 0.3)  # Compute KAMP expectation kamp_expec_biv <- kamp_expectation_biv(pp) print(kamp_expec_biv)  # Compute KAMP variance kamp_var_biv <- kamp_variance_biv(pp) print(kamp_var_biv)"},{"path":"https://dliao1.github.io/kperm/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"KAMP: Permutation-Based Ripley's K Analysis for Spatial Point Patterns","text":"Link documentation vignettes: https://dliao1.github.io/kperm/","code":""},{"path":"https://dliao1.github.io/kperm/reference/check_valid_inputs_biv.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the validity of inputs for bivariate KAMP functions — check_valid_inputs_biv","title":"Checks the validity of inputs for bivariate KAMP functions — check_valid_inputs_biv","text":"Checks validity inputs bivariate KAMP functions","code":""},{"path":"https://dliao1.github.io/kperm/reference/check_valid_inputs_biv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the validity of inputs for bivariate KAMP functions — check_valid_inputs_biv","text":"","code":"check_valid_inputs_biv(ppp_obj, rvec, correction, markvar1, markvar2, thin_pct)"},{"path":"https://dliao1.github.io/kperm/reference/check_valid_inputs_biv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the validity of inputs for bivariate KAMP functions — check_valid_inputs_biv","text":"ppp_obj point pattern object \"ppp\" spatstat package. rvec Vector radii correction Type edge correction. markvar1 Variable used mark points point pattern object first type markvar2 Variable used mark points point pattern object second type thin_pct Thinning percentage","code":""},{"path":"https://dliao1.github.io/kperm/reference/check_valid_inputs_biv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks the validity of inputs for bivariate KAMP functions — check_valid_inputs_biv","text":"TRUE parameter checks pass","code":""},{"path":"https://dliao1.github.io/kperm/reference/check_valid_inputs_univ.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the validity of inputs for univariate KAMP functions — check_valid_inputs_univ","title":"Checks the validity of inputs for univariate KAMP functions — check_valid_inputs_univ","text":"Checks validity inputs univariate KAMP functions","code":""},{"path":"https://dliao1.github.io/kperm/reference/check_valid_inputs_univ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the validity of inputs for univariate KAMP functions — check_valid_inputs_univ","text":"","code":"check_valid_inputs_univ(ppp_obj, rvec, correction, markvar, thin_pct)"},{"path":"https://dliao1.github.io/kperm/reference/check_valid_inputs_univ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the validity of inputs for univariate KAMP functions — check_valid_inputs_univ","text":"ppp_obj point pattern object \"ppp\" spatstat package. rvec Vector radii correction Type edge correction. markvar variable used mark points point pattern object. thin_pct Thinning percentage","code":""},{"path":"https://dliao1.github.io/kperm/reference/check_valid_inputs_univ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks the validity of inputs for univariate KAMP functions — check_valid_inputs_univ","text":"TRUE parameter checks pass","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp-package.html","id":null,"dir":"Reference","previous_headings":"","what":"kamp: KAMP: Permutation-Based Ripley's K Analysis for Spatial Point Patterns — kamp-package","title":"kamp: KAMP: Permutation-Based Ripley's K Analysis for Spatial Point Patterns — kamp-package","text":"Provides functions calculate KAMP, robust scalable K-statistic inhomogenous spatial point pattern data.","code":""},{"path":[]},{"path":"https://dliao1.github.io/kperm/reference/kamp-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"kamp: KAMP: Permutation-Based Ripley's K Analysis for Spatial Point Patterns — kamp-package","text":"Maintainer: Daisy Liao daisy.liao@emory.edu (ORCID)","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation.html","id":null,"dir":"Reference","previous_headings":"","what":"KAMP univariate expectation — kamp_expectation","title":"KAMP univariate expectation — kamp_expectation","text":"Computes KAMP (K-function Adjusted Marked Permutations) expectation given spatial point pattern. function calculates Ripley's K using traditional Ripley's K method (based Kcross) KAMP-adjusted CSR baseline (based Kest). KAMP-adjusted CSR represents robust baseline K (compared traditional CSR) accounts spatial clustering inhomogeneity point pattern compared traditional CSR assumption, avoiding computational burden permuting point pattern. Notes: function uses spatstat package hood, automatically uses border correction number points point pattern 3000. See ?Kcross ?Kest details K calculation methods. See kamp_expectation_mat matrix-based implementation.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KAMP univariate expectation — kamp_expectation","text":"","code":"kamp_expectation(   ppp_obj,   rvec = c(0, 0.05, 0.075, 0.1, 0.15, 0.2),   correction = \"trans\",   markvar = \"immune\",   thin_pct = 0 )"},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KAMP univariate expectation — kamp_expectation","text":"ppp_obj point pattern object spatstat.geom package. rvec Vector radii calculate KAMP expectation. Defaults c(0, 0.05, 0.075, 0.1, 0.15, 0.2). correction Type edge correction method used passed Kcross Kest. Defaults translational edge correction. markvar Identifies subset marked points. Defaults immune. thin_pct Percentage determines much thin amount points point pattern object. Defaults 0.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KAMP univariate expectation — kamp_expectation","text":"dataframe following columns: r radius K calculated. k observed K value Kcross theo_csr theoretical K CSR Kcross kamp_csr adjusted CSR representing permuted expectation. kamp_fundiff difference observed K KAMP CSR","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"KAMP univariate expectation — kamp_expectation","text":"Compute KAMP Expectation","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KAMP univariate expectation — kamp_expectation","text":"","code":"if (requireNamespace(\"spatstat.geom\", quietly = TRUE)) {   # simulates a simple spatial point pattern with two types   win <- spatstat.geom::owin(c(0, 1), c(0, 1))   pp <- spatstat.random::rpoispp(lambda = 100, win = win)   marks <- sample(c(\"immune\", \"background\"), pp$n, replace = TRUE)   marked_pp <- spatstat.geom::ppp(pp$x, pp$y, window = win, marks = factor(marks))    # computes KAMP expectation   kamp_result <- kamp_expectation(marked_pp, markvar = \"immune\")   print(kamp_result) } #> # A tibble: 6 × 5 #>       r      k theo_csr kamp_csr kamp_fundiff #>   <dbl>  <dbl>    <dbl>    <dbl>        <dbl> #> 1 0     0       0        0            0       #> 2 0.05  0.0111  0.00785  0.00854      0.00256 #> 3 0.075 0.0208  0.0177   0.0182       0.00256 #> 4 0.1   0.0381  0.0314   0.0306       0.00749 #> 5 0.15  0.0768  0.0707   0.0737       0.00316 #> 6 0.2   0.133   0.126    0.129        0.00382"},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv.html","id":null,"dir":"Reference","previous_headings":"","what":"KAMP bivariate expectation — kamp_expectation_biv","title":"KAMP bivariate expectation — kamp_expectation_biv","text":"Computes KAMP (K-function Adjusted Marked Permutations) expectation bivariate point patterns. function calculates Ripley's K using traditional Ripley's K method (based Kcross) KAMP-adjusted CSR baseline (based Kest). KAMP-adjusted CSR represents robust baseline K (compared traditional CSR) accounts spatial clustering inhomogeneity point pattern compared traditional CSR assumption, avoiding computational burden permuting point pattern. Note: function uses spatstat package hood. See ?Kcross ?Kest details K calculation methods. See kamp_expectation_biv_mat matrix-based implementation KAMP bivariate expectation.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KAMP bivariate expectation — kamp_expectation_biv","text":"","code":"kamp_expectation_biv(   ppp_obj,   rvec = c(0, 0.05, 0.075, 0.1, 0.15, 0.2),   correction = \"trans\",   markvar1 = \"immune1\",   markvar2 = \"immune2\",   thin_pct = 0 )"},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KAMP bivariate expectation — kamp_expectation_biv","text":"ppp_obj point pattern object spatstat.geom package. rvec Vector radii calculate KAMP expectation. Defaults c(0, 0.05, 0.075, 0.1, 0.15, 0.2). correction Type edge correction. Defaults translational. markvar1 Variable used mark points point pattern object first type. Default \"immune1\". markvar2 Variable used mark points point pattern object second type. Default \"immune2\". thin_pct Percentage determines much thin amount points point pattern object. Default 0.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KAMP bivariate expectation — kamp_expectation_biv","text":"dataframe following columns: r radius K calculated. k observed K value theo_csr theoretical K CSR kamp_csr adjusted CSR representing KAMP permuted expectation. kamp_fundiff difference observed K KAMP CSR","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"KAMP bivariate expectation — kamp_expectation_biv","text":"Computes KAMP Expectation Bivariate Point Patterns","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KAMP bivariate expectation — kamp_expectation_biv","text":"","code":"if (requireNamespace(\"spatstat.geom\", quietly = TRUE) &&     requireNamespace(\"spatstat.random\", quietly = TRUE)) {    # Simulates a window   win <- spatstat.geom::owin(c(0, 1), c(0, 1))    # Generates 200 total points   pp <- spatstat.random::rpoispp(lambda = 200, win = win)    # Assigns three marks: immune1, immune2, and background   marks <- sample(c(\"immune1\", \"immune2\", \"background\"), pp$n, replace = TRUE, prob = c(0.3, 0.3, 0.4))    # Creates marked point pattern   marked_pp <- spatstat.geom::ppp(pp$x, pp$y, window = win, marks = factor(marks))    # Computes KAMP expectation   result <- kamp_expectation_biv(marked_pp, markvar1 = \"immune1\", markvar2 = \"immune2\")   print(result) } #> # A tibble: 6 × 5 #>       r       k theo_csr kamp_csr kamp_fundiff #>   <dbl>   <dbl>    <dbl>    <dbl>        <dbl> #> 1 0     0        0        0            0       #> 2 0.05  0.00588  0.00785  0.00712     -0.00124 #> 3 0.075 0.0171   0.0177   0.0181      -0.00100 #> 4 0.1   0.0287   0.0314   0.0319      -0.00317 #> 5 0.15  0.0673   0.0707   0.0700      -0.00272 #> 6 0.2   0.127    0.126    0.122        0.00498"},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"KAMP bivariate expectation (Matrix Implementation) — kamp_expectation_biv_mat","title":"KAMP bivariate expectation (Matrix Implementation) — kamp_expectation_biv_mat","text":"Computes KAMP (K-function Adjusted Marked Permutations) expectation bivariate point patterns using matrix-based approach. Note slower. See kamp_expectation_biv spatstat-based implementation KAMP bivariate expectation.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KAMP bivariate expectation (Matrix Implementation) — kamp_expectation_biv_mat","text":"","code":"kamp_expectation_biv_mat(   ppp_obj,   rvec = c(0, 0.05, 0.075, 0.1, 0.15, 0.2),   correction = \"trans\",   markvar1 = \"immune1\",   markvar2 = \"immune2\",   thin_pct = 0 )"},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KAMP bivariate expectation (Matrix Implementation) — kamp_expectation_biv_mat","text":"ppp_obj point pattern object spatstat.geom package. rvec Vector radii calculate KAMP expectation. Defaults c(0, 0.05, 0.075, 0.1, 0.15, 0.2). correction Type edge correction method. Defaults translational. markvar1 Variable used mark points point pattern object first type. Default \"immune1\". markvar2 Variable used mark points point pattern object second type. Default \"immune2\". thin_pct Percentage determines much thin amount points point pattern object. Default 0.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KAMP bivariate expectation (Matrix Implementation) — kamp_expectation_biv_mat","text":"dataframe following columns: r radius K calculated. k observed K value theo_csr theoretical K CSR kamp_csr adjusted CSR representing KAMP permuted expectation. kamp_fundiff difference observed K KAMP CSR","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"KAMP bivariate expectation (Matrix Implementation) — kamp_expectation_biv_mat","text":"Bivariate KAMP Expectation (Matrix Implementation)","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KAMP bivariate expectation (Matrix Implementation) — kamp_expectation_biv_mat","text":"","code":"if (requireNamespace(\"spatstat.geom\", quietly = TRUE) &&     requireNamespace(\"spatstat.random\", quietly = TRUE)) {    # Simulates a window   win <- spatstat.geom::owin(c(0, 1), c(0, 1))    # Generates 200 total points   pp <- spatstat.random::rpoispp(lambda = 200, win = win)    # Assigns three marks: immune1, immune2, and background   marks <- sample(c(\"immune1\", \"immune2\", \"background\"), pp$n, replace = TRUE, prob = c(0.3, 0.3, 0.4))    # Creates marked point pattern   marked_pp <- spatstat.geom::ppp(pp$x, pp$y, window = win, marks = factor(marks))    # Computes KAMP expectation   result <- kamp_expectation_biv_mat(marked_pp, markvar1 = \"immune1\", markvar2 = \"immune2\")   print(result) } #> # A tibble: 6 × 5 #>       r       k theo_csr kamp_csr kamp_fundiff #>   <dbl>   <dbl>    <dbl>    <dbl>        <dbl> #> 1 0     0        0        0           0        #> 2 0.05  0.00828  0.00785  0.00868    -0.000401 #> 3 0.075 0.0191   0.0177   0.0189      0.000221 #> 4 0.1   0.0325   0.0314   0.0337     -0.00113  #> 5 0.15  0.0713   0.0707   0.0736     -0.00232  #> 6 0.2   0.122    0.126    0.129      -0.00703"},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"kamp_expectation_biv_mat_helper — kamp_expectation_biv_mat_helper","title":"kamp_expectation_biv_mat_helper — kamp_expectation_biv_mat_helper","text":"Helper function calculate KAMP expectation bivariate point patterns.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat_helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kamp_expectation_biv_mat_helper — kamp_expectation_biv_mat_helper","text":"","code":"kamp_expectation_biv_mat_helper(   ppp_obj,   rvalue,   correction = \"trans\",   markvar1 = \"immune1\",   markvar2 = \"immune2\" )"},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat_helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"kamp_expectation_biv_mat_helper — kamp_expectation_biv_mat_helper","text":"ppp_obj point pattern object \"ppp\" spatstat package. rvalue single radius correction Type edge correction. Defaults translational. markvar1 Variable used mark points point pattern object first type. Default \"immune1\". markvar2 Variable used mark points point pattern object second type. Default \"immune2\".","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat_helper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"kamp_expectation_biv_mat_helper — kamp_expectation_biv_mat_helper","text":"single-row dataframe following columns: r radius K calculated. k observed K value theo_csr theoretical K CSR kamp_csr adjusted CSR representing KAMP permuted expectation. kamp_fundiff difference observed K KAMP CSR","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat_helper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"kamp_expectation_biv_mat_helper — kamp_expectation_biv_mat_helper","text":"Helper function KAMP Expectation (Bivariate matrix-based implementation)","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"KAMP univariate Expectation (Matrix Implementation) — kamp_expectation_mat","title":"KAMP univariate Expectation (Matrix Implementation) — kamp_expectation_mat","text":"Computes KAMP (K-function Adjusted Marked Permutations) expectation given spatial point pattern. function calculates Ripley's K using traditional Ripley's K method (based Kcross) KAMP-adjusted CSR baseline (based Kest). KAMP-adjusted CSR represents realistic baseline K (compared traditional CSR) accounts spatial clustering inhomogeneity point pattern compared traditional CSR assumption, avoiding computational burden permuting point pattern. Note: slower, matrix-based implementation KAMP expectation See get_kamp_expectation faster implementation utilizes functions spatstat","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KAMP univariate Expectation (Matrix Implementation) — kamp_expectation_mat","text":"","code":"kamp_expectation_mat(   ppp_obj,   rvec = c(0, 0.05, 0.075, 0.1, 0.15, 0.2),   correction = \"trans\",   markvar = \"immune\",   thin_pct = 0 )"},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KAMP univariate Expectation (Matrix Implementation) — kamp_expectation_mat","text":"ppp_obj point pattern object class \"ppp\" spatstat package. rvec vector radii calculate KAMP expectation. correction Type edge correction. Defaults translational. markvar variable used mark points point pattern object. Defaults \"immune\". thin_pct Percentage determines much thin amount points point pattern object. Defaults 0.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KAMP univariate Expectation (Matrix Implementation) — kamp_expectation_mat","text":"dataframe following columns: r radius K calculated. k observed K value calculated using matrices theo_csr theoretical K CSR kamp_csr adjusted CSR representing permuted expectation. kamp_fundiff difference observed K KAMP CSR","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"KAMP univariate Expectation (Matrix Implementation) — kamp_expectation_mat","text":"Computes KAMP Expectation using matrices","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KAMP univariate Expectation (Matrix Implementation) — kamp_expectation_mat","text":"","code":"if (requireNamespace(\"spatstat.geom\", quietly = TRUE)) { # simulate a simple spatial point pattern with two types win <- spatstat.geom::owin(c(0, 1), c(0, 1)) pp <- spatstat.random::rpoispp(lambda = 100, win = win) marks <- sample(c(\"immune\", \"background\"), pp$n, replace = TRUE) marked_pp <- spatstat.geom::ppp(pp$x, pp$y, window = win, marks = factor(marks)) # compute KAMP expectation using matrix method kamp_result_mat <- kamp_expectation_mat(marked_pp, markvar = \"immune\") print(kamp_result_mat) } #> # A tibble: 6 × 5 #>       r       k theo_csr kamp_csr kamp_fundiff #>   <dbl>   <dbl>    <dbl>    <dbl>        <dbl> #> 1 0     0        0        0           0        #> 2 0.05  0.00305  0.00785  0.00801    -0.00495  #> 3 0.075 0.0132   0.0177   0.0175     -0.00430  #> 4 0.1   0.0284   0.0314   0.0310     -0.00258  #> 5 0.15  0.0688   0.0707   0.0691     -0.000292 #> 6 0.2   0.130    0.126    0.126       0.00363"},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"kamp_expectation_mat_helper — kamp_expectation_mat_helper","title":"kamp_expectation_mat_helper — kamp_expectation_mat_helper","text":"Helper function calculate KAMP expectation given point pattern object radius.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat_helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kamp_expectation_mat_helper — kamp_expectation_mat_helper","text":"","code":"kamp_expectation_mat_helper(   ppp_obj,   rvalue,   correction = \"trans\",   markvar = \"immune\" )"},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat_helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"kamp_expectation_mat_helper — kamp_expectation_mat_helper","text":"ppp_obj point pattern object \"ppp\" spatstat package. rvalue single radius correction Type edge correction. Defaults translational markvar variable used mark points point pattern object. Defaults \"immune\".","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat_helper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"kamp_expectation_mat_helper — kamp_expectation_mat_helper","text":"dataframe following columns: r radius K calculated. k observed K value Kcross theo_csr theoretical K CSR Kcross kamp_csr adjusted CSR representing permuted expectation. kamp_fundiff difference observed K KAMP CSR","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat_helper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"kamp_expectation_mat_helper — kamp_expectation_mat_helper","text":"KAMP Expectation Helper","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance.html","id":null,"dir":"Reference","previous_headings":"","what":"KAMP univariate variance — kamp_variance","title":"KAMP univariate variance — kamp_variance","text":"Computes KAMP (K-function Adjusted Marked Permutations) variance given spatial point pattern. Also returns KAMP expectation, z-statistic, p-value. Note: matrix-based implementation KAMP variance use spatstat package. wrapper around kamp_variance_helper function calculates KAMP variance one radius maps vector radii.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KAMP univariate variance — kamp_variance","text":"","code":"kamp_variance(   ppp_obj,   rvec = c(0, 0.05, 0.075, 0.1, 0.15, 0.2),   correction = \"trans\",   markvar = \"immune\",   thin_pct = 0 )"},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KAMP univariate variance — kamp_variance","text":"ppp_obj point pattern object class \"ppp\" spatstat package. rvec vector radii calculate KAMP variance. correction Type edge correction. Defaults translational. markvar variable used mark points point pattern object. Default \"immune\". thin_pct Percentage determines much thin amount points point pattern object.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KAMP univariate variance — kamp_variance","text":"dataframe following columns: r radius K calculated. k observed K value theo_csr theoretical K CSR kamp_csr adjusted CSR representing KAMP permuted expectation. kamp_fundiff difference observed K KAMP CSR var Variance K permutation null distribution z Z statistic, calculated normalizing K using formula: (K - KAMP)/sqrt(var) pval P-value, calculated using formula: pnorm(-z)","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"KAMP univariate variance — kamp_variance","text":"KAMP Variance","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KAMP univariate variance — kamp_variance","text":"","code":"if (requireNamespace(\"spatstat.geom\", quietly = TRUE)) {   # simulates a simple spatial point pattern with two types   win <- spatstat.geom::owin(c(0, 1), c(0, 1))   pp <- spatstat.random::rpoispp(lambda = 100, win = win)   marks <- sample(c(\"immune\", \"background\"), pp$n, replace = TRUE)   marked_pp <- spatstat.geom::ppp(pp$x, pp$y, window = win, marks = factor(marks))    # computes KAMP variance   kamp_result <- kamp_variance(marked_pp, markvar = \"immune\")   print(kamp_result) } #> # A tibble: 6 × 7 #>       r       k theo_csr kamp_csr        var       z   pvalue #>   <dbl>   <dbl>    <dbl>    <dbl>      <dbl>   <dbl>    <dbl> #> 1 0     0        0        0       0          NaN     NaN      #> 2 0.05  0.00950  0.00785  0.00764 0.00000278   1.11    0.133  #> 3 0.075 0.0229   0.0177   0.0186  0.00000699   1.63    0.0521 #> 4 0.1   0.0367   0.0314   0.0309  0.0000152    1.49    0.0683 #> 5 0.15  0.0752   0.0707   0.0673  0.0000370    1.30    0.0969 #> 6 0.2   0.129    0.126    0.122   0.0000639    0.835   0.202"},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv.html","id":null,"dir":"Reference","previous_headings":"","what":"KAMP bivariate variance — kamp_variance_biv","title":"KAMP bivariate variance — kamp_variance_biv","text":"Computes KAMP (K-function Adjusted Marked Permutations) variance bivariate point patterns. function calculates Ripley's K using traditional Ripley's K method KAMP-adjusted CSR baseline using matrix-based implementation. KAMP-adjusted CSR represents realistic baseline K (compared traditional CSR) accounts spatial clustering inhomogeneity point pattern compared traditional CSR assumption, avoiding computational burden permuting point pattern. Note: function implements slower, matrix-based implementation KAMP variance. wrapper around kamp_variance_biv_helper function calculates KAMP variance one radius maps vector radii.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KAMP bivariate variance — kamp_variance_biv","text":"","code":"kamp_variance_biv(   ppp_obj,   rvec = c(0, 0.05, 0.075, 0.1, 0.15, 0.2),   correction = \"trans\",   markvar1 = \"immune1\",   markvar2 = \"immune2\",   thin_pct = 0 )"},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KAMP bivariate variance — kamp_variance_biv","text":"ppp_obj point pattern object spatstat.geom package. rvec vector radii calculate KAMP expectation. Defaults c(0, 0.05, 0.075, 0.1, 0.15, 0.2). correction Type edge correction. Defaults translational. markvar1 Variable used mark points point pattern object first type. Default \"immune1\". markvar2 Variable used mark points point pattern object second type. Default \"immune2\". thin_pct Percentage determines much thin amount points point pattern object. Default 0.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KAMP bivariate variance — kamp_variance_biv","text":"dataframe following columns: r radius K calculated. k observed K value theo_csr theoretical K CSR kamp_csr adjusted CSR representing KAMP permuted expectation. var Variance K permutation null distribution z Z statistic, calculated normalizing K using formula: (K - KAMP)/sqrt(var) pval P-value, calculated using formula: pnorm(-z)","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"KAMP bivariate variance — kamp_variance_biv","text":"Computes KAMP Variance Bivariate Point Patterns","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KAMP bivariate variance — kamp_variance_biv","text":"","code":"if (requireNamespace(\"spatstat.geom\", quietly = TRUE) &&     requireNamespace(\"spatstat.random\", quietly = TRUE)) {    # Simulates a window   win <- spatstat.geom::owin(c(0, 1), c(0, 1))    # Generates 200 total points   pp <- spatstat.random::rpoispp(lambda = 200, win = win)    # Assigns three marks: immune1, immune2, and background   marks <- sample(c(\"immune1\", \"immune2\", \"background\"), pp$n, replace = TRUE, prob = c(0.3, 0.3, 0.4))    # Creates marked point pattern   marked_pp <- spatstat.geom::ppp(pp$x, pp$y, window = win, marks = factor(marks))    # Computes KAMP variance   result <- kamp_variance_biv(marked_pp, markvar1 = \"immune1\", markvar2 = \"immune2\")   print(result) } #> # A tibble: 6 × 7 #>       r      k theo_csr kamp_csr        var       z   pvalue #>   <dbl>  <dbl>    <dbl>    <dbl>      <dbl>   <dbl>    <dbl> #> 1 0     0       0        0       0          NaN     NaN      #> 2 0.05  0.0110  0.00785  0.00833 0.00000211   1.85    0.0320 #> 3 0.075 0.0203  0.0177   0.0182  0.00000499   0.910   0.181  #> 4 0.1   0.0364  0.0314   0.0321  0.00000922   1.40    0.0810 #> 5 0.15  0.0795  0.0707   0.0726  0.0000231    1.44    0.0748 #> 6 0.2   0.133   0.126    0.129   0.0000483    0.555   0.289"},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"kamp_variance_biv_helper — kamp_variance_biv_helper","title":"kamp_variance_biv_helper — kamp_variance_biv_helper","text":"Helper function calculate KAMP variance bivariate point patterns.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv_helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kamp_variance_biv_helper — kamp_variance_biv_helper","text":"","code":"kamp_variance_biv_helper(   ppp_obj,   rvalue,   correction = \"trans\",   markvar1 = \"immune1\",   markvar2 = \"immune2\" )"},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv_helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"kamp_variance_biv_helper — kamp_variance_biv_helper","text":"ppp_obj point pattern object \"ppp\" spatstat package. rvalue single radius correction Type edge correction. Defaults translational. markvar1 Variable used mark points point pattern object first type. Default \"immune1\". markvar2 Variable used mark points point pattern object second type. Default \"immune2\".","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv_helper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"kamp_variance_biv_helper — kamp_variance_biv_helper","text":"single-row dataframe following columns: r radius K calculated. k observed K value theo_csr theoretical K CSR kamp_csr adjusted CSR representing KAMP permuted expectation. var Variance K permutation null distribution z Z statistic, calculated normalizing K using formula: (K - KAMP)/sqrt(var) pval P-value, calculated using formula: pnorm(-z)","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv_helper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"kamp_variance_biv_helper — kamp_variance_biv_helper","text":"Helper function bivariate KAMP Variance","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"kamp_variance_helper — kamp_variance_helper","title":"kamp_variance_helper — kamp_variance_helper","text":"Helper function calculate KAMP variance point pattern object single radius.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kamp_variance_helper — kamp_variance_helper","text":"","code":"kamp_variance_helper(ppp_obj, rvalue, correction = \"trans\", markvar = \"immune\")"},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"kamp_variance_helper — kamp_variance_helper","text":"ppp_obj point pattern object \"ppp\" spatstat package. rvalue single radius correction Type edge correction. Defaults translational. markvar variable used mark points point pattern object. Defaults \"immune\".","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_helper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"kamp_variance_helper — kamp_variance_helper","text":"single-row dataframe following columns: r current radius K calculated. k observed K value theo_csr theoretical K CSR kamp_csr adjusted CSR representing KAMP permuted expectation. kamp_fundiff difference observed K KAMP CSR var Variance K permutation null distribution z Z statistic, calculated normalizing K using formula: (K - KAMP)/sqrt(var) pval P-value, calculated using formula: pnorm(-z)","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_helper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"kamp_variance_helper — kamp_variance_helper","text":"Helper function KAMP Variance","code":""},{"path":"https://dliao1.github.io/kperm/reference/ovarian_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Ovarian Cancer Example Point Pattern — ovarian_df","title":"Ovarian Cancer Example Point Pattern — ovarian_df","text":"processed spatial point pattern object derived VectraPolaris ovarian cancer dataset. object contains immune background cells within tumor region one image.","code":""},{"path":"https://dliao1.github.io/kperm/reference/ovarian_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ovarian Cancer Example Point Pattern — ovarian_df","text":"","code":"ovarian_df"},{"path":"https://dliao1.github.io/kperm/reference/ovarian_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Ovarian Cancer Example Point Pattern — ovarian_df","text":"ppp object (spatstat.geom package) marks indicating immune status. x X y Y marks Cell type: \"immune\" \"background\"","code":""},{"path":"https://dliao1.github.io/kperm/reference/ovarian_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Ovarian Cancer Example Point Pattern — ovarian_df","text":"Subset HumanOvarianCancerVP() VectraPolarisData package.","code":""},{"path":"https://dliao1.github.io/kperm/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://dliao1.github.io/kperm/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://dliao1.github.io/kperm/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://dliao1.github.io/kperm/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulates spatial data — sim_pp_data","title":"Simulates spatial data — sim_pp_data","text":"Simulates spatial point pattern two cell types: background immune.","code":""},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulates spatial data — sim_pp_data","text":"","code":"sim_pp_data(   lambda_n,   abundance,   markvar1 = \"immune\",   markvar2 = \"background\",   distribution = \"hom\",   clust = FALSE )"},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulates spatial data — sim_pp_data","text":"lambda_n Number total cells image abundance Percentage intensity marker positive cells markvar1 Marker positive cell type (default \"immune\") markvar2 Marker negative cell type (default \"background\") distribution Determines whether image homogeneous (\"hom\") inhomogeneous (\"inhom\") clust Determines whether image simulated without clustering (TRUE/FALSE)","code":""},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulates spatial data — sim_pp_data","text":"point pattern object class \"ppp\" spatstat package two cell types background immune.","code":""},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulates spatial data — sim_pp_data","text":"","code":"if (requireNamespace(\"dplyr\", quietly = TRUE) &&    requireNamespace(\"ggplot2\", quietly = TRUE) &&    requireNamespace(\"tibble\", quietly = TRUE) &&    requireNamespace(\"magrittr\", quietly = TRUE)) {   pp_obj <- sim_pp_data(lambda_n = 200, abundance = 0.3)   magrittr::`%>%`(   tibble::as_tibble(pp_obj),   ggplot2::ggplot(ggplot2::aes(x, y, color = marks))   ) +   ggplot2::geom_point() }"},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data_biv.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulates bivariate point process data — sim_pp_data_biv","title":"Simulates bivariate point process data — sim_pp_data_biv","text":"Simulates spatial point pattern three cell types: background, immune1, immune2.","code":""},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data_biv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulates bivariate point process data — sim_pp_data_biv","text":"","code":"sim_pp_data_biv(   lambda_n,   abundance,   markvar1 = \"immune1\",   markvar2 = \"immune2\",   markvar3 = \"background\",   distribution = \"hom\",   clust = FALSE )"},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data_biv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulates bivariate point process data — sim_pp_data_biv","text":"lambda_n Number total cells image abundance Percentage intensity marker positive cells markvar1 Marker positive cell type (default \"immune1\") markvar2 Marker positive cell type (default \"immune2\") markvar3 Marker negative cell type (default \"background\") distribution Determines whether image homogeneous (\"hom\") inhomogeneous (\"inhom\") clust Determines whether image simulated without clustering (TRUE/FALSE)","code":""},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data_biv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulates bivariate point process data — sim_pp_data_biv","text":"point pattern object class \"ppp\" spatstat package three cell types background, immune1, immune2.","code":""},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data_biv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulates bivariate point process data — sim_pp_data_biv","text":"Simulates bivariate point process data","code":""},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data_biv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulates bivariate point process data — sim_pp_data_biv","text":"","code":"if (requireNamespace(\"dplyr\", quietly = TRUE) &&    requireNamespace(\"ggplot2\", quietly = TRUE) &&    requireNamespace(\"tibble\", quietly = TRUE) &&    requireNamespace(\"magrittr\", quietly = TRUE)) {   pp_obj <- sim_pp_data_biv(lambda_n = 200, abundance = 0.3)   magrittr::`%>%`(   tibble::as_tibble(pp_obj),   ggplot2::ggplot(ggplot2::aes(x, y, color = marks))   ) +   ggplot2::geom_point() }"}]
