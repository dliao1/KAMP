[{"path":"https://dliao1.github.io/kperm/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Daisy Liao Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://dliao1.github.io/kperm/articles/my-vignette.html","id":"simulating","dir":"Articles","previous_headings":"Univariate","what":"Simulating","title":"my-vignette","text":"","code":"sim_data <- sim_pp_data(lambda_n = 200,                      abundance = 0.3,                     cell_type1 = \"immune\",                     cell_type2 = \"background\",                     distribution = \"hom\",                     clust = FALSE) marksvar = \"immune\" rvalues = seq(0, 1, length.out = 50)  #w = convexhull.xy(ovarian[[\"x\"]], ovarian[[\"y\"]])  # define pp_obj # pp_obj = ppp(ovarian[[\"x\"]], ovarian[[\"y\"]], window = w, marks = ovarian[[marksvar]])  pp_obj <- sim_data  df_back <- as.data.frame(pp_obj) %>%   as_tibble()  df_back #> # A tibble: 199 × 3 #>         x      y marks      #>     <dbl>  <dbl> <fct>      #>  1 0.435  0.779  background #>  2 0.324  0.230  background #>  3 0.861  0.902  background #>  4 0.0842 0.752  background #>  5 0.930  0.410  background #>  6 0.200  0.725  immune     #>  7 0.625  0.814  background #>  8 0.275  0.0477 background #>  9 0.180  0.0191 background #> 10 0.194  0.0192 immune     #> # ℹ 189 more rows   as_tibble(pp_obj) %>%     ggplot(aes(x,y, color = marks)) +     geom_point()"},{"path":"https://dliao1.github.io/kperm/articles/my-vignette.html","id":"expectation","dir":"Articles","previous_headings":"Univariate","what":"Expectation","title":"my-vignette","text":"","code":"kamp_expec = kamp_expectation(ppp_obj = pp_obj,                             rvec = rvalues,                             markvar = marksvar,                             thin_pct = 0.75) %>%    mutate(og_fundiff = k - theo_csr,          method = \"kamp\") %>%   drop_na()  kamp_expec #> # A tibble: 35 × 7 #>         r       k theo_csr kamp_csr kamp_fundiff og_fundiff method #>     <dbl>   <dbl>    <dbl>    <dbl>        <dbl>      <dbl> <chr>  #>  1 0      0        0        0          0           0        kamp   #>  2 0.0204 0.00152  0.00131  0.00171   -0.000191    0.000207 kamp   #>  3 0.0408 0.00563  0.00523  0.00524    0.000391    0.000400 kamp   #>  4 0.0612 0.00989  0.0118   0.0107    -0.000843   -0.00189  kamp   #>  5 0.0816 0.0192   0.0209   0.0191     0.0000123  -0.00179  kamp   #>  6 0.102  0.0320   0.0327   0.0313     0.000739   -0.000678 kamp   #>  7 0.122  0.0464   0.0471   0.0462     0.000197   -0.000678 kamp   #>  8 0.143  0.0630   0.0641   0.0626     0.000476   -0.00109  kamp   #>  9 0.163  0.0832   0.0837   0.0811     0.00216    -0.000510 kamp   #> 10 0.184  0.110    0.106    0.103      0.00625     0.00362  kamp   #> # ℹ 25 more rows   kamp_expec_mat = kamp_expectation_mat(ppp_obj = pp_obj,                                     rvec = rvalues,                                     markvar = marksvar) %>%    drop_na()  kamp_expec_mat #> # A tibble: 50 × 5 #>         r       k theo_csr kamp_csr kamp_fundiff #>     <dbl>   <dbl>    <dbl>    <dbl>        <dbl> #>  1 0      0        0        0          0         #>  2 0.0204 0.00152  0.00131  0.00171   -0.000191  #>  3 0.0408 0.00563  0.00523  0.00524    0.000391  #>  4 0.0612 0.00989  0.0118   0.0107    -0.000843  #>  5 0.0816 0.0192   0.0209   0.0191     0.0000123 #>  6 0.102  0.0320   0.0327   0.0313     0.000739  #>  7 0.122  0.0464   0.0471   0.0462     0.000197  #>  8 0.143  0.0630   0.0641   0.0626     0.000476  #>  9 0.163  0.0832   0.0837   0.0811     0.00216   #> 10 0.184  0.110    0.106    0.103      0.00625   #> # ℹ 40 more rows"},{"path":"https://dliao1.github.io/kperm/articles/my-vignette.html","id":"variance","dir":"Articles","previous_headings":"Univariate","what":"Variance","title":"my-vignette","text":"","code":"kamp_var = kamp_variance(ppp_obj = pp_obj,                          rvec = rvalues,                          markvar = marksvar) %>%    drop_na()  kamp_var #> # A tibble: 49 × 7 #>         r       k theo_csr kamp_csr         var        z pvalue #>     <dbl>   <dbl>    <dbl>    <dbl>       <dbl>    <dbl>  <dbl> #>  1 0.0204 0.00152  0.00131  0.00171 0.000000744 -0.221    0.588 #>  2 0.0408 0.00563  0.00523  0.00524 0.00000229   0.258    0.398 #>  3 0.0612 0.00989  0.0118   0.0107  0.00000435  -0.404    0.657 #>  4 0.0816 0.0192   0.0209   0.0191  0.00000804   0.00432  0.498 #>  5 0.102  0.0320   0.0327   0.0313  0.0000152    0.189    0.425 #>  6 0.122  0.0464   0.0471   0.0462  0.0000230    0.0411   0.484 #>  7 0.143  0.0630   0.0641   0.0626  0.0000358    0.0795   0.468 #>  8 0.163  0.0832   0.0837   0.0811  0.0000513    0.302    0.381 #>  9 0.184  0.110    0.106    0.103   0.0000709    0.742    0.229 #> 10 0.204  0.135    0.131    0.129   0.000101     0.577    0.282 #> # ℹ 39 more rows"},{"path":[]},{"path":"https://dliao1.github.io/kperm/articles/my-vignette.html","id":"simulating-1","dir":"Articles","previous_headings":"Bivariate","what":"Simulating","title":"my-vignette","text":"","code":"sim_data_biv <- sim_pp_data_biv(lambda_n = 200,                      abundance = 0.3,                     cell_type1 = \"immune1\",                     cell_type2 = \"immune2\",                     cell_type3 = \"background\",                     distribution = \"inhom\",                     clust = TRUE) #> Computing probability for Cell 1 #> Computing probability for Cell 2 #> Computing hole probability   marksvar = \"immune\" rvalues = seq(0, 1, length.out = 50)  pp_obj <- sim_data_biv  df_back <- as.data.frame(pp_obj) %>%   as_tibble()  df_back #> # A tibble: 180 × 3 #>        x     y marks      #>    <dbl> <dbl> <fct>      #>  1 4.07  0.690 background #>  2 6.84  8.71  immune2    #>  3 0.565 8.65  immune2    #>  4 5.13  1.18  immune2    #>  5 1.13  9.50  background #>  6 1.15  9.23  immune2    #>  7 8.35  6.15  background #>  8 5.15  1.42  background #>  9 8.37  4.02  immune1    #> 10 9.39  4.80  immune1    #> # ℹ 170 more rows   as_tibble(pp_obj) %>%     ggplot(aes(x,y, color = marks)) +     geom_point()"},{"path":"https://dliao1.github.io/kperm/articles/my-vignette.html","id":"expectation-1","dir":"Articles","previous_headings":"Bivariate","what":"Expectation","title":"my-vignette","text":"","code":"kamp_expec_biv = kamp_expectation_biv(ppp_obj = pp_obj,                             rvec = rvalues,                             #markvar = marksvar,                             thin_pct = 0.5) %>%    drop_na()  kamp_expec_biv #> # A tibble: 50 × 5 #>         r     k theo_csr kamp_csr kamp_fundiff #>     <dbl> <dbl>    <dbl>    <dbl>        <dbl> #>  1 0      0      0         0             0     #>  2 0.0204 0      0.00131   0             0     #>  3 0.0408 0      0.00523   0             0     #>  4 0.0612 0      0.0118    0             0     #>  5 0.0816 0      0.0209    0             0     #>  6 0.102  0.554  0.0327    0.0258        0.529 #>  7 0.122  0.554  0.0471    0.0258        0.529 #>  8 0.143  0.554  0.0641    0.0258        0.529 #>  9 0.163  0.554  0.0837    0.0258        0.529 #> 10 0.184  0.554  0.106     0.0780        0.477 #> # ℹ 40 more rows  kamp_expec_biv_mat = kamp_expectation_biv_mat(ppp_obj = pp_obj,                                     rvec = rvalues) %>%    drop_na()  kamp_expec_biv_mat #> # A tibble: 50 × 5 #>         r     k theo_csr kamp_csr kamp_fundiff #>     <dbl> <dbl>    <dbl>    <dbl>        <dbl> #>  1 0      0      0        0            0       #>  2 0.0204 0      0.00131  0.00622     -0.00622 #>  3 0.0408 0      0.00523  0.00622     -0.00622 #>  4 0.0612 0      0.0118   0.00622     -0.00622 #>  5 0.0816 0      0.0209   0.0188      -0.0188  #>  6 0.102  0.125  0.0327   0.0250       0.0996  #>  7 0.122  0.125  0.0471   0.0439       0.0807  #>  8 0.143  0.375  0.0641   0.0755       0.300   #>  9 0.163  0.627  0.0837   0.113        0.513   #> 10 0.184  0.753  0.106    0.164        0.589   #> # ℹ 40 more rows"},{"path":"https://dliao1.github.io/kperm/articles/my-vignette.html","id":"variance-1","dir":"Articles","previous_headings":"Bivariate","what":"Variance","title":"my-vignette","text":"","code":"kamp_biv_var = kamp_variance_biv(ppp_obj = pp_obj,                          rvec = rvalues) %>%    drop_na()  kamp_biv_var #> # A tibble: 49 × 7 #>         r     k theo_csr kamp_csr      var      z      pvalue #>     <dbl> <dbl>    <dbl>    <dbl>    <dbl>  <dbl>       <dbl> #>  1 0.0204 0      0.00131  0.00622 0.000731 -0.230 0.591       #>  2 0.0408 0      0.00523  0.00622 0.000731 -0.230 0.591       #>  3 0.0612 0      0.0118   0.00622 0.000731 -0.230 0.591       #>  4 0.0816 0      0.0209   0.0188  0.00220  -0.400 0.655       #>  5 0.102  0.125  0.0327   0.0250  0.00293   1.84  0.0330      #>  6 0.122  0.125  0.0471   0.0439  0.00513   1.13  0.130       #>  7 0.143  0.375  0.0641   0.0755  0.00889   3.18  0.000742    #>  8 0.163  0.627  0.0837   0.113   0.0136    4.40  0.00000538  #>  9 0.184  0.753  0.106    0.164   0.0199    4.18  0.0000148   #> 10 0.204  0.880  0.131    0.177   0.0217    4.77  0.000000916 #> # ℹ 39 more rows"},{"path":"https://dliao1.github.io/kperm/articles/my-vignette.html","id":"wtf","dir":"Articles","previous_headings":"Bivariate","what":"wtf","title":"my-vignette","text":"move helpers utils file need timing stuff think abt user facing stuff 10000 cells use border correction thinning percentage = 0 whole separate function bivariate unit tests small spatstat generated datasets https://github.com/julia-wrobel/registr/blob/master/R/register_fpca.R (documentation example) SIMULATION SETUP: can compare traditional K (trans border correction), Kinhom, Kperm (100 permutations), KAMP images : random, clustered, inhomogenous (generate show images) 4 nulls total: 2 null: CLUSTERING CLUSTERING within , homogenous inhomogenous background Varied rate total cells (n) immune cell abundance (p) n ∈(100, 500, 1000) # maybe tweak bc decreased p ∈(0.1, 0.3, 0.5) 3*3 = 9 images subset null hypothesis 9x4 = 36 total, assuming im avging barplots stuff? Compare: accuracy (bar plots fundiff centered 0) computation time can also compare power type error # yah idk can compare ? fundiff > 0 thats clustering? getting variance perm KAMP dist comparing CIs?? need look code building site https://pkgdown.r-lib.org/ pkgdown::build_site() devtools::document() devtools::install() devtools::build_vignettes() TESTING usethis::use_test(“name test”) devtools::test()","code":"win <- owin(c(0, 1), c(0, 1))  pp <- rpoispp(lambda = 100, win = win) marks <- sample(c(\"immune1\", \"immune2\", \"background\"), pp$n, replace = TRUE) marked_pp <- ppp(pp$x, pp$y, window = win, marks = factor(marks)) result <- kamp_variance_biv(marked_pp, markvar1 = \"immune1\", markvar2 = \"immune2\") result #> # A tibble: 6 × 7 #>       r       k theo_csr kamp_csr       var       z  pvalue #>   <dbl>   <dbl>    <dbl>    <dbl>     <dbl>   <dbl>   <dbl> #> 1 0     0        0        0       0         NaN     NaN     #> 2 0.05  0.00713  0.00785  0.00801 0.0000167  -0.215   0.585 #> 3 0.075 0.0218   0.0177   0.0180  0.0000404   0.604   0.273 #> 4 0.1   0.0371   0.0314   0.0292  0.0000660   0.976   0.165 #> 5 0.15  0.0829   0.0707   0.0777  0.000186    0.377   0.353 #> 6 0.2   0.147    0.126    0.132   0.000351    0.759   0.224  print(names(result)) #> [1] \"r\"        \"k\"        \"theo_csr\" \"kamp_csr\" \"var\"      \"z\"        \"pvalue\""},{"path":"https://dliao1.github.io/kperm/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daisy Liao. Author, maintainer.","code":""},{"path":"https://dliao1.github.io/kperm/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Liao D (2025). kperm: KAMP: Permutation-Based Ripley's K Analysis Spatial Point Patterns. R package version 0.0.0.9000, https://dliao1.github.io/kperm/.","code":"@Manual{,   title = {kperm: KAMP: Permutation-Based Ripley's K Analysis for Spatial Point Patterns},   author = {Daisy Liao},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://dliao1.github.io/kperm/}, }"},{"path":"https://dliao1.github.io/kperm/reference/check_valid_inputs_biv.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the validity of inputs for bivariate KAMP functions — check_valid_inputs_biv","title":"Checks the validity of inputs for bivariate KAMP functions — check_valid_inputs_biv","text":"Checks validity inputs bivariate KAMP functions","code":""},{"path":"https://dliao1.github.io/kperm/reference/check_valid_inputs_biv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the validity of inputs for bivariate KAMP functions — check_valid_inputs_biv","text":"","code":"check_valid_inputs_biv(ppp_obj, rvec, correction, markvar1, markvar2, thin_pct)"},{"path":"https://dliao1.github.io/kperm/reference/check_valid_inputs_biv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the validity of inputs for bivariate KAMP functions — check_valid_inputs_biv","text":"ppp_obj point pattern object \"ppp\" spatstat package. rvec Vector radii correction Type edge correction. markvar1 Variable used mark points point pattern object first type markvar2 Variable used mark points point pattern object second type thin_pct Thinning percentage","code":""},{"path":"https://dliao1.github.io/kperm/reference/check_valid_inputs_biv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks the validity of inputs for bivariate KAMP functions — check_valid_inputs_biv","text":"TRUE parameter checks pass","code":""},{"path":"https://dliao1.github.io/kperm/reference/check_valid_inputs_univ.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the validity of inputs for univariate KAMP functions — check_valid_inputs_univ","title":"Checks the validity of inputs for univariate KAMP functions — check_valid_inputs_univ","text":"Checks validity inputs univariate KAMP functions","code":""},{"path":"https://dliao1.github.io/kperm/reference/check_valid_inputs_univ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the validity of inputs for univariate KAMP functions — check_valid_inputs_univ","text":"","code":"check_valid_inputs_univ(ppp_obj, rvec, correction, markvar, thin_pct)"},{"path":"https://dliao1.github.io/kperm/reference/check_valid_inputs_univ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the validity of inputs for univariate KAMP functions — check_valid_inputs_univ","text":"ppp_obj point pattern object \"ppp\" spatstat package. rvec Vector radii correction Type edge correction. markvar variable used mark points point pattern object. thin_pct Thinning percentage","code":""},{"path":"https://dliao1.github.io/kperm/reference/check_valid_inputs_univ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks the validity of inputs for univariate KAMP functions — check_valid_inputs_univ","text":"TRUE parameter checks pass","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation.html","id":null,"dir":"Reference","previous_headings":"","what":"KAMP univariate Expectation — kamp_expectation","title":"KAMP univariate Expectation — kamp_expectation","text":"Computes KAMP (K-function Adjusted Marked Permutations) expectation given spatial point pattern. function calculates Ripley's K using traditional Ripley's K method (based Kcross) KAMP-adjusted CSR baseline (based Kest). KAMP-adjusted CSR represents robust baseline K (compared traditional CSR) accounts spatial clustering inhomogeneity point pattern compared traditional CSR assumption, avoiding computational burden permuting point pattern. Notes: function uses spatstat package hood, automatically uses border correction number points point pattern 3000. See ?Kcross ?Kest details K calculation methods. See kamp_expectation_mat matrix-based implementation.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KAMP univariate Expectation — kamp_expectation","text":"","code":"kamp_expectation(   ppp_obj,   rvec = c(0, 0.05, 0.075, 0.1, 0.15, 0.2),   correction = \"trans\",   markvar = \"immune\",   thin_pct = 0 )"},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KAMP univariate Expectation — kamp_expectation","text":"ppp_obj point pattern object spatstat.geom package. rvec Vector radii calculate KAMP expectation. Defaults c(0, 0.05, 0.075, 0.1, 0.15, 0.2). correction Type edge correction method used passed Kcross Kest. Defaults translational edge correction. markvar Identifies subset marked points. Defaults immune. thin_pct Percentage determines much thin amount points point pattern object. Defaults 0.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KAMP univariate Expectation — kamp_expectation","text":"dataframe following columns: r radius K calculated. k observed K value Kcross theo_csr theoretical K CSR Kcross kamp_csr adjusted CSR representing permuted expectation. kamp_fundiff difference observed K KAMP CSR","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"KAMP univariate Expectation — kamp_expectation","text":"Compute KAMP Expectation","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KAMP univariate Expectation — kamp_expectation","text":"","code":"if (requireNamespace(\"spatstat.geom\", quietly = TRUE)) {   # simulates a simple spatial point pattern with two types   win <- spatstat.geom::owin(c(0, 1), c(0, 1))   pp <- spatstat.random::rpoispp(lambda = 100, win = win)   marks <- sample(c(\"immune\", \"background\"), pp$n, replace = TRUE)   marked_pp <- spatstat.geom::ppp(pp$x, pp$y, window = win, marks = factor(marks))    # computes KAMP expectation   kamp_result <- kamp_expectation(marked_pp, markvar = \"immune\")   print(kamp_result) } #> # A tibble: 6 × 5 #>       r       k theo_csr kamp_csr kamp_fundiff #>   <dbl>   <dbl>    <dbl>    <dbl>        <dbl> #> 1 0     0        0        0            0       #> 2 0.05  0.00970  0.00785  0.00586      0.00384 #> 3 0.075 0.0211   0.0177   0.0144       0.00669 #> 4 0.1   0.0328   0.0314   0.0267       0.00614 #> 5 0.15  0.0809   0.0707   0.0705       0.0103  #> 6 0.2   0.137    0.126    0.128        0.00906"},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv.html","id":null,"dir":"Reference","previous_headings":"","what":"KAMP bivariate Expectation — kamp_expectation_biv","title":"KAMP bivariate Expectation — kamp_expectation_biv","text":"Computes KAMP (K-function Adjusted Marked Permutations) expectation bivariate point patterns. function calculates Ripley's K using traditional Ripley's K method (based Kcross) KAMP-adjusted CSR baseline (based Kest). KAMP-adjusted CSR represents robust baseline K (compared traditional CSR) accounts spatial clustering inhomogeneity point pattern compared traditional CSR assumption, avoiding computational burden permuting point pattern. Note: function uses spatstat package hood. See ?Kcross ?Kest details K calculation methods. See kamp_expectation_biv_mat matrix-based implementation KAMP bivariate expectation.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KAMP bivariate Expectation — kamp_expectation_biv","text":"","code":"kamp_expectation_biv(   ppp_obj,   rvec = c(0, 0.05, 0.075, 0.1, 0.15, 0.2),   correction = \"trans\",   markvar1 = \"immune1\",   markvar2 = \"immune2\",   thin_pct = 0 )"},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KAMP bivariate Expectation — kamp_expectation_biv","text":"ppp_obj point pattern object spatstat.geom package. rvec Vector radii calculate KAMP expectation. Defaults c(0, 0.05, 0.075, 0.1, 0.15, 0.2). correction Type edge correction. Defaults translational. markvar1 Variable used mark points point pattern object first type. Default \"immune1\". markvar2 Variable used mark points point pattern object second type. Default \"immune2\". thin_pct Percentage determines much thin amount points point pattern object. Default 0.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KAMP bivariate Expectation — kamp_expectation_biv","text":"dataframe following columns: r radius K calculated. k observed K value theo_csr theoretical K CSR kamp_csr adjusted CSR representing KAMP permuted expectation. kamp_fundiff difference observed K KAMP CSR","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"KAMP bivariate Expectation — kamp_expectation_biv","text":"Computes KAMP Expectation Bivariate Point Patterns","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KAMP bivariate Expectation — kamp_expectation_biv","text":"","code":"if (requireNamespace(\"spatstat.geom\", quietly = TRUE) &&     requireNamespace(\"spatstat.random\", quietly = TRUE)) {    # Simulates a window   win <- spatstat.geom::owin(c(0, 1), c(0, 1))    # Generates 200 total points   pp <- spatstat.random::rpoispp(lambda = 200, win = win)    # Assigns three marks: immune1, immune2, and background   marks <- sample(c(\"immune1\", \"immune2\", \"background\"), pp$n, replace = TRUE, prob = c(0.3, 0.3, 0.4))    # Creates marked point pattern   marked_pp <- spatstat.geom::ppp(pp$x, pp$y, window = win, marks = factor(marks))    # Computes KAMP expectation   result <- kamp_expectation_biv(marked_pp, markvar1 = \"immune1\", markvar2 = \"immune2\")   print(result) } #> # A tibble: 6 × 5 #>       r       k theo_csr kamp_csr kamp_fundiff #>   <dbl>   <dbl>    <dbl>    <dbl>        <dbl> #> 1 0     0        0        0           0        #> 2 0.05  0.00819  0.00785  0.00876    -0.000569 #> 3 0.075 0.0184   0.0177   0.0182      0.000148 #> 4 0.1   0.0328   0.0314   0.0308      0.00192  #> 5 0.15  0.0746   0.0707   0.0701      0.00449  #> 6 0.2   0.129    0.126    0.119       0.00991"},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"KAMP bivariate expectation (Matrix Implementation) — kamp_expectation_biv_mat","title":"KAMP bivariate expectation (Matrix Implementation) — kamp_expectation_biv_mat","text":"Computes KAMP (K-function Adjusted Marked Permutations) expectation bivariate point patterns using matrix-based approach. Note slower. See kamp_expectation_biv spatstat-based implementation KAMP bivariate expectation.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KAMP bivariate expectation (Matrix Implementation) — kamp_expectation_biv_mat","text":"","code":"kamp_expectation_biv_mat(   ppp_obj,   rvec = c(0, 0.05, 0.075, 0.1, 0.15, 0.2),   correction = \"trans\",   markvar1 = \"immune1\",   markvar2 = \"immune2\",   thin_pct = 0 )"},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KAMP bivariate expectation (Matrix Implementation) — kamp_expectation_biv_mat","text":"ppp_obj point pattern object spatstat.geom package. rvec Vector radii calculate KAMP expectation. Defaults c(0, 0.05, 0.075, 0.1, 0.15, 0.2). correction Type edge correction method. Defaults translational. markvar1 Variable used mark points point pattern object first type. Default \"immune1\". markvar2 Variable used mark points point pattern object second type. Default \"immune2\". thin_pct Percentage determines much thin amount points point pattern object. Default 0.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KAMP bivariate expectation (Matrix Implementation) — kamp_expectation_biv_mat","text":"dataframe following columns: r radius K calculated. k observed K value theo_csr theoretical K CSR kamp_csr adjusted CSR representing KAMP permuted expectation. kamp_fundiff difference observed K KAMP CSR","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"KAMP bivariate expectation (Matrix Implementation) — kamp_expectation_biv_mat","text":"Bivariate KAMP Expectation (Matrix Implementation)","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KAMP bivariate expectation (Matrix Implementation) — kamp_expectation_biv_mat","text":"","code":"if (requireNamespace(\"spatstat.geom\", quietly = TRUE) &&     requireNamespace(\"spatstat.random\", quietly = TRUE)) {    # Simulates a window   win <- spatstat.geom::owin(c(0, 1), c(0, 1))    # Generates 200 total points   pp <- spatstat.random::rpoispp(lambda = 200, win = win)    # Assigns three marks: immune1, immune2, and background   marks <- sample(c(\"immune1\", \"immune2\", \"background\"), pp$n, replace = TRUE, prob = c(0.3, 0.3, 0.4))    # Creates marked point pattern   marked_pp <- spatstat.geom::ppp(pp$x, pp$y, window = win, marks = factor(marks))    # Computes KAMP expectation   result <- kamp_expectation_biv_mat(marked_pp, markvar1 = \"immune1\", markvar2 = \"immune2\")   print(result) } #> # A tibble: 6 × 5 #>       r       k theo_csr kamp_csr kamp_fundiff #>   <dbl>   <dbl>    <dbl>    <dbl>        <dbl> #> 1 0     0        0        0          0         #> 2 0.05  0.00843  0.00785  0.00791    0.000513  #> 3 0.075 0.0209   0.0177   0.0190     0.00191   #> 4 0.1   0.0333   0.0314   0.0332     0.0000339 #> 5 0.15  0.0749   0.0707   0.0734     0.00153   #> 6 0.2   0.133    0.126    0.128      0.00468"},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"kamp_expectation_biv_mat_helper — kamp_expectation_biv_mat_helper","title":"kamp_expectation_biv_mat_helper — kamp_expectation_biv_mat_helper","text":"Helper function calculate KAMP expectation bivariate point patterns.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat_helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kamp_expectation_biv_mat_helper — kamp_expectation_biv_mat_helper","text":"","code":"kamp_expectation_biv_mat_helper(   ppp_obj,   rvalue,   correction = \"trans\",   markvar1 = \"immune1\",   markvar2 = \"immune2\" )"},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat_helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"kamp_expectation_biv_mat_helper — kamp_expectation_biv_mat_helper","text":"ppp_obj point pattern object \"ppp\" spatstat package. rvalue single radius correction Type edge correction. Defaults translational. markvar1 Variable used mark points point pattern object first type. Default \"immune1\". markvar2 Variable used mark points point pattern object second type. Default \"immune2\".","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat_helper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"kamp_expectation_biv_mat_helper — kamp_expectation_biv_mat_helper","text":"single-row dataframe following columns: r radius K calculated. k observed K value theo_csr theoretical K CSR kamp_csr adjusted CSR representing KAMP permuted expectation. kamp_fundiff difference observed K KAMP CSR","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_biv_mat_helper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"kamp_expectation_biv_mat_helper — kamp_expectation_biv_mat_helper","text":"Helper function KAMP Expectation (Bivariate matrix-based implementation)","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"KAMP univariate Expectation (Matrix Implementation) — kamp_expectation_mat","title":"KAMP univariate Expectation (Matrix Implementation) — kamp_expectation_mat","text":"Computes KAMP (K-function Adjusted Marked Permutations) expectation given spatial point pattern. function calculates Ripley's K using traditional Ripley's K method (based Kcross) KAMP-adjusted CSR baseline (based Kest). KAMP-adjusted CSR represents realistic baseline K (compared traditional CSR) accounts spatial clustering inhomogeneity point pattern compared traditional CSR assumption, avoiding computational burden permuting point pattern. Note: slower, matrix-based implementation KAMP expectation See get_kamp_expectation faster implementation utilizes functions spatstat","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KAMP univariate Expectation (Matrix Implementation) — kamp_expectation_mat","text":"","code":"kamp_expectation_mat(   ppp_obj,   rvec = c(0, 0.05, 0.075, 0.1, 0.15, 0.2),   correction = \"trans\",   markvar = \"immune\",   thin_pct = 0 )"},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KAMP univariate Expectation (Matrix Implementation) — kamp_expectation_mat","text":"ppp_obj point pattern object class \"ppp\" spatstat package. rvec vector radii calculate KAMP expectation. correction Type edge correction. Defaults translational. markvar variable used mark points point pattern object. Defaults \"immune\". thin_pct Percentage determines much thin amount points point pattern object. Defaults 0.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KAMP univariate Expectation (Matrix Implementation) — kamp_expectation_mat","text":"dataframe following columns: r radius K calculated. k observed K value calculated using matrices theo_csr theoretical K CSR kamp_csr adjusted CSR representing permuted expectation. kamp_fundiff difference observed K KAMP CSR","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"KAMP univariate Expectation (Matrix Implementation) — kamp_expectation_mat","text":"Computes KAMP Expectation using matrices","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KAMP univariate Expectation (Matrix Implementation) — kamp_expectation_mat","text":"","code":"if (requireNamespace(\"spatstat.geom\", quietly = TRUE)) { # simulate a simple spatial point pattern with two types win <- spatstat.geom::owin(c(0, 1), c(0, 1)) pp <- spatstat.random::rpoispp(lambda = 100, win = win) marks <- sample(c(\"immune\", \"background\"), pp$n, replace = TRUE) marked_pp <- spatstat.geom::ppp(pp$x, pp$y, window = win, marks = factor(marks)) # compute KAMP expectation using matrix method kamp_result_mat <- kamp_expectation_mat(marked_pp, markvar = \"immune\") print(kamp_result_mat) } #> # A tibble: 6 × 5 #>       r       k theo_csr kamp_csr kamp_fundiff #>   <dbl>   <dbl>    <dbl>    <dbl>        <dbl> #> 1 0     0        0        0            0       #> 2 0.05  0.00600  0.00785  0.00731     -0.00131 #> 3 0.075 0.0131   0.0177   0.0153      -0.00219 #> 4 0.1   0.0269   0.0314   0.0297      -0.00286 #> 5 0.15  0.0597   0.0707   0.0703      -0.0106  #> 6 0.2   0.117    0.126    0.122       -0.00485"},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"kamp_expectation_mat_helper — kamp_expectation_mat_helper","title":"kamp_expectation_mat_helper — kamp_expectation_mat_helper","text":"Helper function calculate KAMP expectation given point pattern object radius.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat_helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kamp_expectation_mat_helper — kamp_expectation_mat_helper","text":"","code":"kamp_expectation_mat_helper(   ppp_obj,   rvalue,   correction = \"trans\",   markvar = \"immune\" )"},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat_helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"kamp_expectation_mat_helper — kamp_expectation_mat_helper","text":"ppp_obj point pattern object \"ppp\" spatstat package. rvalue single radius correction Type edge correction. Defaults translational markvar variable used mark points point pattern object. Defaults \"immune\".","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat_helper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"kamp_expectation_mat_helper — kamp_expectation_mat_helper","text":"dataframe following columns: r radius K calculated. k observed K value Kcross theo_csr theoretical K CSR Kcross kamp_csr adjusted CSR representing permuted expectation. kamp_fundiff difference observed K KAMP CSR","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_expectation_mat_helper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"kamp_expectation_mat_helper — kamp_expectation_mat_helper","text":"KAMP Expectation Helper","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes univariate KAMP variance — kamp_variance","title":"Computes univariate KAMP variance — kamp_variance","text":"Computes KAMP (K-function Adjusted Marked Permutations) variance given spatial point pattern. Also returns KAMP expectation, z-statistic, p-value. Note: matrix-based implementation KAMP variance use spatstat package. wrapper around kamp_variance_helper function calculates KAMP variance one radius maps vector radii.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes univariate KAMP variance — kamp_variance","text":"","code":"kamp_variance(   ppp_obj,   rvec = c(0, 0.05, 0.075, 0.1, 0.15, 0.2),   correction = \"trans\",   markvar = \"immune\",   thin_pct = 0 )"},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes univariate KAMP variance — kamp_variance","text":"ppp_obj point pattern object class \"ppp\" spatstat package. rvec vector radii calculate KAMP variance. correction Type edge correction. Defaults translational. markvar variable used mark points point pattern object. Default \"immune\". thin_pct Percentage determines much thin amount points point pattern object.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes univariate KAMP variance — kamp_variance","text":"dataframe following columns: r radius K calculated. k observed K value theo_csr theoretical K CSR kamp_csr adjusted CSR representing KAMP permuted expectation. kamp_fundiff difference observed K KAMP CSR var Variance K permutation null distribution z Z statistic, calculated normalizing K using formula: (K - KAMP)/sqrt(var) pval P-value, calculated using formula: pnorm(-z)","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computes univariate KAMP variance — kamp_variance","text":"KAMP Variance","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes univariate KAMP variance — kamp_variance","text":"","code":"if (requireNamespace(\"spatstat.geom\", quietly = TRUE)) {   # simulates a simple spatial point pattern with two types   win <- spatstat.geom::owin(c(0, 1), c(0, 1))   pp <- spatstat.random::rpoispp(lambda = 100, win = win)   marks <- sample(c(\"immune\", \"background\"), pp$n, replace = TRUE)   marked_pp <- spatstat.geom::ppp(pp$x, pp$y, window = win, marks = factor(marks))    # computes KAMP variance   kamp_result <- kamp_variance(marked_pp, markvar = \"immune\")   print(kamp_result) } #> # A tibble: 6 × 7 #>       r       k theo_csr kamp_csr        var       z   pvalue #>   <dbl>   <dbl>    <dbl>    <dbl>      <dbl>   <dbl>    <dbl> #> 1 0     0        0        0       0          NaN     NaN      #> 2 0.05  0.00691  0.00785  0.00809 0.00000349  -0.632   0.736  #> 3 0.075 0.0174   0.0177   0.0180  0.00000706  -0.220   0.587  #> 4 0.1   0.0317   0.0314   0.0332  0.0000133   -0.431   0.667  #> 5 0.15  0.0740   0.0707   0.0712  0.0000283    0.522   0.301  #> 6 0.2   0.136    0.126    0.125   0.0000565    1.47    0.0711"},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes bivariate KAMP variance — kamp_variance_biv","title":"Computes bivariate KAMP variance — kamp_variance_biv","text":"Computes KAMP (K-function Adjusted Marked Permutations) variance bivariate point patterns. function calculates Ripley's K using traditional Ripley's K method KAMP-adjusted CSR baseline using matrix-based implementation. KAMP-adjusted CSR represents realistic baseline K (compared traditional CSR) accounts spatial clustering inhomogeneity point pattern compared traditional CSR assumption, avoiding computational burden permuting point pattern. Note: function implements slower, matrix-based implementation KAMP variance. wrapper around kamp_variance_biv_helper function calculates KAMP variance one radius maps vector radii.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes bivariate KAMP variance — kamp_variance_biv","text":"","code":"kamp_variance_biv(   ppp_obj,   rvec = c(0, 0.05, 0.075, 0.1, 0.15, 0.2),   correction = \"trans\",   markvar1 = \"immune1\",   markvar2 = \"immune2\",   thin_pct = 0 )"},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes bivariate KAMP variance — kamp_variance_biv","text":"ppp_obj point pattern object spatstat.geom package. rvec vector radii calculate KAMP expectation. Defaults c(0, 0.05, 0.075, 0.1, 0.15, 0.2). correction Type edge correction. Defaults translational. markvar1 Variable used mark points point pattern object first type. Default \"immune1\". markvar2 Variable used mark points point pattern object second type. Default \"immune2\". thin_pct Percentage determines much thin amount points point pattern object. Default 0.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes bivariate KAMP variance — kamp_variance_biv","text":"dataframe following columns: r radius K calculated. k observed K value theo_csr theoretical K CSR kamp_csr adjusted CSR representing KAMP permuted expectation. var Variance K permutation null distribution z Z statistic, calculated normalizing K using formula: (K - KAMP)/sqrt(var) pval P-value, calculated using formula: pnorm(-z)","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computes bivariate KAMP variance — kamp_variance_biv","text":"Computes KAMP Variance Bivariate Point Patterns","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes bivariate KAMP variance — kamp_variance_biv","text":"","code":"if (requireNamespace(\"spatstat.geom\", quietly = TRUE) &&     requireNamespace(\"spatstat.random\", quietly = TRUE)) {    # Simulates a window   win <- spatstat.geom::owin(c(0, 1), c(0, 1))    # Generates 200 total points   pp <- spatstat.random::rpoispp(lambda = 200, win = win)    # Assigns three marks: immune1, immune2, and background   marks <- sample(c(\"immune1\", \"immune2\", \"background\"), pp$n, replace = TRUE, prob = c(0.3, 0.3, 0.4))    # Creates marked point pattern   marked_pp <- spatstat.geom::ppp(pp$x, pp$y, window = win, marks = factor(marks))    # Computes KAMP variance   result <- kamp_variance_biv(marked_pp, markvar1 = \"immune1\", markvar2 = \"immune2\")   print(result) } #> # A tibble: 6 × 7 #>       r       k theo_csr kamp_csr        var       z  pvalue #>   <dbl>   <dbl>    <dbl>    <dbl>      <dbl>   <dbl>   <dbl> #> 1 0     0        0        0       0          NaN     NaN     #> 2 0.05  0.00772  0.00785  0.00860 0.00000395  -0.440   0.670 #> 3 0.075 0.0169   0.0177   0.0197  0.00000926  -0.928   0.823 #> 4 0.1   0.0224   0.0314   0.0304  0.0000143   -2.11    0.982 #> 5 0.15  0.0568   0.0707   0.0664  0.0000301   -1.74    0.959 #> 6 0.2   0.0909   0.126    0.117   0.0000619   -3.32    1.00"},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"kamp_variance_biv_helper — kamp_variance_biv_helper","title":"kamp_variance_biv_helper — kamp_variance_biv_helper","text":"Helper function calculate KAMP variance bivariate point patterns.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv_helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kamp_variance_biv_helper — kamp_variance_biv_helper","text":"","code":"kamp_variance_biv_helper(   ppp_obj,   rvalue,   correction = \"trans\",   markvar1 = \"immune1\",   markvar2 = \"immune2\" )"},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv_helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"kamp_variance_biv_helper — kamp_variance_biv_helper","text":"ppp_obj point pattern object \"ppp\" spatstat package. rvalue single radius correction Type edge correction. Defaults translational. markvar1 Variable used mark points point pattern object first type. Default \"immune1\". markvar2 Variable used mark points point pattern object second type. Default \"immune2\".","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv_helper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"kamp_variance_biv_helper — kamp_variance_biv_helper","text":"single-row dataframe following columns: r radius K calculated. k observed K value theo_csr theoretical K CSR kamp_csr adjusted CSR representing KAMP permuted expectation. var Variance K permutation null distribution z Z statistic, calculated normalizing K using formula: (K - KAMP)/sqrt(var) pval P-value, calculated using formula: pnorm(-z)","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_biv_helper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"kamp_variance_biv_helper — kamp_variance_biv_helper","text":"Helper function bivariate KAMP Variance","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"kamp_variance_helper — kamp_variance_helper","title":"kamp_variance_helper — kamp_variance_helper","text":"Helper function calculate KAMP variance point pattern object single radius.","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kamp_variance_helper — kamp_variance_helper","text":"","code":"kamp_variance_helper(ppp_obj, rvalue, correction = \"trans\", markvar = \"immune\")"},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"kamp_variance_helper — kamp_variance_helper","text":"ppp_obj point pattern object \"ppp\" spatstat package. rvalue single radius correction Type edge correction. Defaults translational. markvar variable used mark points point pattern object. Defaults \"immune\".","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_helper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"kamp_variance_helper — kamp_variance_helper","text":"single-row dataframe following columns: r current radius K calculated. k observed K value theo_csr theoretical K CSR kamp_csr adjusted CSR representing KAMP permuted expectation. kamp_fundiff difference observed K KAMP CSR var Variance K permutation null distribution z Z statistic, calculated normalizing K using formula: (K - KAMP)/sqrt(var) pval P-value, calculated using formula: pnorm(-z)","code":""},{"path":"https://dliao1.github.io/kperm/reference/kamp_variance_helper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"kamp_variance_helper — kamp_variance_helper","text":"Helper function KAMP Variance","code":""},{"path":"https://dliao1.github.io/kperm/reference/kperm-package.html","id":null,"dir":"Reference","previous_headings":"","what":"kperm: KAMP: Permutation-Based Ripley's K Analysis for Spatial Point Patterns — kperm-package","title":"kperm: KAMP: Permutation-Based Ripley's K Analysis for Spatial Point Patterns — kperm-package","text":"Provides functions calculate KAMP, robust scalable K-statistic inhomogenous spatial point pattern data.","code":""},{"path":[]},{"path":"https://dliao1.github.io/kperm/reference/kperm-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"kperm: KAMP: Permutation-Based Ripley's K Analysis for Spatial Point Patterns — kperm-package","text":"Maintainer: Daisy Liao daisy.liao@emory.edu (ORCID)","code":""},{"path":"https://dliao1.github.io/kperm/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://dliao1.github.io/kperm/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://dliao1.github.io/kperm/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://dliao1.github.io/kperm/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulates spatial data — sim_pp_data","title":"Simulates spatial data — sim_pp_data","text":"Simulates spatial point pattern two cell types: background immune.","code":""},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulates spatial data — sim_pp_data","text":"","code":"sim_pp_data(   lambda_n,   abundance,   cell_type1 = \"immune\",   cell_type2 = \"background\",   distribution = \"hom\",   clust = FALSE )"},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulates spatial data — sim_pp_data","text":"lambda_n Number total cells image abundance Percentage intensity marker positive cells cell_type1 Marker positive cell type (default \"immune\") cell_type2 Marker negative cell type (default \"background\") distribution Determines whether image homogeneous (\"hom\") inhomogeneous (\"inhom\") clust Determines whether image simulated without clustering (TRUE/FALSE)","code":""},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulates spatial data — sim_pp_data","text":"point pattern object class \"ppp\" spatstat package two cell types background immune.","code":""},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulates spatial data — sim_pp_data","text":"","code":"if (requireNamespace(\"dplyr\", quietly = TRUE) &&    requireNamespace(\"ggplot2\", quietly = TRUE) &&    requireNamespace(\"tibble\", quietly = TRUE) &&    requireNamespace(\"magrittr\", quietly = TRUE)) {   pp_obj <- sim_pp_data(lambda_n = 200, abundance = 0.3)   magrittr::`%>%`(   tibble::as_tibble(pp_obj),   ggplot2::ggplot(ggplot2::aes(x, y, color = marks))   ) +   ggplot2::geom_point() }"},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data_biv.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulates bivariate point process data — sim_pp_data_biv","title":"Simulates bivariate point process data — sim_pp_data_biv","text":"Simulates spatial point pattern three cell types: background, immune1, immune2.","code":""},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data_biv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulates bivariate point process data — sim_pp_data_biv","text":"","code":"sim_pp_data_biv(   lambda_n,   abundance,   cell_type1 = \"immune1\",   cell_type2 = \"immune2\",   cell_type3 = \"background\",   distribution = \"hom\",   clust = FALSE )"},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data_biv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulates bivariate point process data — sim_pp_data_biv","text":"lambda_n Number total cells image abundance Percentage intensity marker positive cells cell_type1 Marker positive cell type (default \"immune1\") cell_type2 Marker positive cell type (default \"immune2\") cell_type3 Marker negative cell type (default \"background\") distribution Determines whether image homogeneous (\"hom\") inhomogeneous (\"inhom\") clust Determines whether image simulated without clustering (TRUE/FALSE)","code":""},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data_biv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulates bivariate point process data — sim_pp_data_biv","text":"point pattern object class \"ppp\" spatstat package three cell types background, immune1, immune2.","code":""},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data_biv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulates bivariate point process data — sim_pp_data_biv","text":"Simulates bivariate point process data","code":""},{"path":"https://dliao1.github.io/kperm/reference/sim_pp_data_biv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulates bivariate point process data — sim_pp_data_biv","text":"","code":"if (requireNamespace(\"dplyr\", quietly = TRUE) &&    requireNamespace(\"ggplot2\", quietly = TRUE) &&    requireNamespace(\"tibble\", quietly = TRUE) &&    requireNamespace(\"magrittr\", quietly = TRUE)) {   pp_obj <- sim_pp_data_bivariate(lambda_n = 200, abundance = 0.3)   magrittr::`%>%`(   tibble::as_tibble(pp_obj),   ggplot2::ggplot(ggplot2::aes(x, y, color = marks))   ) +   ggplot2::geom_point() } #> Error in sim_pp_data_bivariate(lambda_n = 200, abundance = 0.3): could not find function \"sim_pp_data_bivariate\""}]
